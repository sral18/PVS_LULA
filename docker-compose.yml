version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: lulateko
      RABBITMQ_DEFAULT_PASS: lulateko
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  stock-publisher:
    image: lstockerteko/stock-publisher:latest
    environment:
      RABBITMQ_URL: amqp://lulateko:lulateko@rabbitmq:5672/
    depends_on:
      - rabbitmq
    restart: on-failure

  consumer-msft:
    image: lstockerteko/consumer:latest
    environment:
      RABBITMQ_URL: amqp://lulateko:lulateko@rabbitmq:5672/
      RABBITMQ_QUEUE: MSFT
      MONGODB_URI: mongodb://mongo0:27017/
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo0:
        condition: service_healthy
    restart: on-failure

  consumer-tsla:
    image: lstockerteko/consumer:latest
    environment:
      RABBITMQ_URL: amqp://lulateko:lulateko@rabbitmq:5672/
      RABBITMQ_QUEUE: TSLA
      MONGODB_URI: mongodb://mongo0:27017/
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo0:
        condition: service_healthy
    restart: on-failure

  consumer-aapl:
    image: lstockerteko/consumer:latest
    environment:
      RABBITMQ_URL: amqp://lulateko:lulateko@rabbitmq:5672/
      RABBITMQ_QUEUE: AAPL
      MONGODB_URI: mongodb://mongo0:27017/
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    depends_on:
      - rabbitmq
      - mongo0
    restart: on-failure
    
  mongo0:
    image: mongo:7.0
    container_name: mongo0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data0:/data/db
      - mongo_config0:/data/configdb
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    restart: on-failure
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo0:27017',priority:1},{_id:1,host:'mongo1:27018',priority:0.5},{_id:2,host:'mongo2:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30

  mongo1:
    image: mongo:7.0
    container_name: mongo1
    ports:
      - "27018:27018"
    volumes:
      - mongo_data1:/data/db
      - mongo_config1:/data/configdb
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    restart: on-failure

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    ports:
      - "27019:27019"
    volumes:
      - mongo_data2:/data/db
      - mongo_config2:/data/configdb
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    restart: on-failure

  stock-liveview:
    image: lucamteko/stock-liveview:latest
    container_name: stock-liveview
    environment:
      MONGODB_URI: mongodb://localhost:27017,localhost:27018,localhost:27019/?replicaSet=rs0
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks    
    ports:
      - "3000:3000"
    depends_on:
      - mongo0
    restart: on-failure

volumes:
  rabbitmq_data:
  mongo_data0:
  mongo_config0:
  mongo_data1:
  mongo_config1:
  mongo_data2:
  mongo_config2:
